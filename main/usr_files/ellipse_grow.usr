c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)


c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

      real x0(3)
      save x0
      data x0 /3*0/

      parameter (lt=lx1*ly1*lz1*lelv)
      common /scrns/ vort(lt,3), w1(lt), w2(lt)

      n = nx1*ny1*nz1*nelv

      if (istep.eq.0) call set_obj  ! define objects for surface integrals

      call estimate_strouhal
      call comp_vort3(vort , w1, w2, vx, vy, vz)
      call copy (T,vort,n)    ! Vorticity --> T
      ifto = .true.           ! Dump vorticity as T

      scale = 2.  ! Cd = F/(.5 rho U^2 ) = 2*F
      !if (mod(istep,10).eq.0) 
      call torque_calc(scale,x0,.true.,.false.)
      call user_dump_force

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer :: i
      real :: a2,a3,a4
      real :: ui,uf,du
      real, dimension(:), allocatable :: vel, t_trans, pert
      real :: dtrans,tt
      
      n = 1
      allocate(vel(0:n),t_trans(0:n),pert(0:n))
      dtrans = 100.0
      t_trans(0) = 0.0
      vel(0) = 0.0
      pert(0) = 0.01
      do i = 1,n
            t_trans(i) = i*3000.0/n
            vel(i) = 1.0
            pert(i) = 0.0
      enddo

      do i = 0,n-1
          tt = (time-t_trans(i))/dtrans
          if (tt .gt. 0.0 .and. tt .lt. 1.0) then
              ui = vel(i)
              uf = vel(i+1)
              du = uf-ui
              a4 = pert(i)*tanh(4.0*y)
              a2 = 3.0*du+a4
              a3 = -2.0*du-2.0*a4
              ux = ui+a2*tt**2+a3*tt**3+a4*tt**4
              uy=0.0
              uz=0.0
              return
          endif
          if (time .gt. t_trans(i) .and. time .lt. t_trans(i+1)) then
              ux=vel(i+1)
              uy=0.0
              uz=0.0
              return
          endif
      enddo
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'

c     call platform_timer(0) ! not too verbose
c     call platform_timer(1) ! mxm, ping-pong, and all_reduce timer

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'

      real lambda, aa, bb, alpha
      real nn
      real mapx, mapy, rotx, roty, arg1, arg2
      ntot = nx1*ny1*nz1*nelt

      param(66) = 0.   ! These give the std nek binary i/o and are 
      param(67) = 0.   ! good default values

      one    = 1.0
      pi     = 4.0*atan(one)

      lambda = 5.0
      aa     = 1
      bb     = 1
      alpha  = 0*pi/180   
      nn     = 4.   

      do i=1,ntot

         arg1 = (xm1(i,1,1,1)**2 + ym1(i,1,1,1)**2 - 0.25)/lambda
   
          mapx = aa*xm1(i,1,1,1)						! Ellipse
          mapy = bb*ym1(i,1,1,1)

c     mapx = aa*sign(one,xm1(i,1,1,1))*abs(xm1(i,1,1,1)*0.5)**(2.0/nn)		! Superellipse
c     mapy = bb*sign(one,ym1(i,1,1,1))*abs(ym1(i,1,1,1)*0.5)**(2.0/nn)

         xm1(i,1,1,1) = xm1(i,1,1,1) + (mapx-xm1(i,1,1,1))*exp(-arg1)
         ym1(i,1,1,1) = ym1(i,1,1,1) + (mapy-ym1(i,1,1,1))*exp(-arg1)

         rotx =  xm1(i,1,1,1)*cos(alpha) + ym1(i,1,1,1)*sin(alpha) 
         roty = -xm1(i,1,1,1)*sin(alpha) + ym1(i,1,1,1)*cos(alpha) 

         arg2 = ((xm1(i,1,1,1)/aa)**2 + (ym1(i,1,1,1)/bb)**2 
     +            - 0.25)/lambda

         xm1(i,1,1,1) = xm1(i,1,1,1) + (rotx-xm1(i,1,1,1))*exp(-arg2)
         ym1(i,1,1,1) = ym1(i,1,1,1) + (roty-ym1(i,1,1,1))*exp(-arg2)

      enddo

      param(59) = 1. ! Force nek5 to recognize element deformation

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'
c
      return
      end
c-----------------------------------------------------------------------
      subroutine estimate_strouhal

      include 'SIZE'
      include 'TOTAL'

      real tlast,vlast,tcurr,vcurr,t0,t1
      save tlast,vlast,tcurr,vcurr,t0,t1
      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /

      integer e,eg,eg0,e0

      eg0 = 622          ! Identify element/processor in wake
      mid = gllnid(eg0)
      e0  = gllel (eg0)

      st  = 0

      if (nid.eq.mid) then

         tlast = tcurr
         vlast = vcurr

         tcurr = time
         vcurr = vy (1,ny1,1,e0)

         xcurr = xm1(1,ny1,1,e0)
         ycurr = ym1(1,ny1,1,e0)

         write(6,2) istep,time,vcurr,xcurr,ycurr
    2    format(i9,1p4e13.5,' vcurr')

         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
            t0  = t1
            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
            per = t1-t0
            if (per.gt.0) st = 1./per
         endif
      endif

      st = glmax(st,1)

      n  = nx1*ny1*nz1*nelv
      ux = glamax(vx,n)
      uy = glamax(vy,n)

      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
    1 format(i5,1p4e12.4,' Strouhal')

      return
      end
c-----------------------------------------------------------------------
      subroutine user_dump_force
      include 'SIZE'
      include 'TOTAL'

      common /ctorq/ dragx(0:maxobj),dragpx(0:maxobj),dragvx(0:maxobj)
     $             , dragy(0:maxobj),dragpy(0:maxobj),dragvy(0:maxobj)
     $             , dragz(0:maxobj),dragpz(0:maxobj),dragvz(0:maxobj)
c
     $             , torqx(0:maxobj),torqpx(0:maxobj),torqvx(0:maxobj)
     $             , torqy(0:maxobj),torqpy(0:maxobj),torqvy(0:maxobj)
     $             , torqz(0:maxobj),torqpz(0:maxobj),torqvz(0:maxobj)
c
     $             , dpdx_mean,dpdy_mean,dpdz_mean
     $             , dgtq(3,4)

      if (istep.eq.0) then

	    open (unit=701,file="force.dat")
            write (701,"(A23,5X,A23,5X,A23)") 'time','dragy','dragx'

      endif

      
      write (701,"(E23.16,5X,E23.16,5X,E23.16)") time,dragy(1),dragx(1)
7010  format(5f20.8)
      end
c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'

      integer e,f,eg

      nobj = 1
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F'
         hcode( 2,ii) = 'F'
         hcode( 3,ii) = 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj

      if (maxobj.lt.nobj) call exitti('increase maxobj in SIZE$',nobj)

      nxyz  = nx1*ny1*nz1
      nface = 2*ndim

      do e=1,nelv
      do f=1,nface
         if (cbc(f,e,1).eq.'W  ') then
            iobj  = 1
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               eg  = lglel(e)
               object(iobj,mem,1) = eg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,eg,e,nid,' OBJ'
c   1          format(6i9,a4)

            endif
         endif
      enddo
      enddo

c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
